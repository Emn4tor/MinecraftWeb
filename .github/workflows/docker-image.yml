name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }} # Using PAT instead of password

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        env:
          IMAGE_NAME: mc_web
          IMAGE_TAG: latest
        run: |
          set -e
          TAG=${IMAGE_NAME}:${IMAGE_TAG}
          echo "Using image tag: $TAG"
          docker buildx build --cache-to type=local,dest=/tmp/.buildx-cache --cache-from type=local,src=/tmp/.buildx-cache --push -t ${{ secrets.DOCKER_USERNAME }}/$TAG .
          echo "IMAGE_TAG=${{ secrets.DOCKER_USERNAME }}/$TAG" >> $GITHUB_ENV

      - name: Run Tests
        run: |
          set -e
          echo "Running container for tests..."
          docker run -d --rm --name test-container ${{ secrets.DOCKER_USERNAME }}/mc_web:latest
          sleep 5
          echo "Checking if container is running..."
          docker ps | grep test-container
          echo "Performing HTTP health check..."
          curl -f http://localhost:8080 || { echo "Health check failed"; exit 1; }
          echo "Tests passed successfully."
          docker stop test-container

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy via SSH
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -e
          echo "Updating system and installing Docker if necessary..."
          sudo apt update && sudo apt install -y docker.io
          mkdir -p ~/mc_web
          cd ~/mc_web
          echo "Stopping existing container if running..."
          docker stop mc_web || true
          docker rm mc_web || true
          echo "Pulling latest Docker image..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/mc_web:latest
          echo "Starting new container..."
          docker run -d -p 8080:80 --name mc_web ${{ secrets.DOCKER_USERNAME }}/mc_web:latest
          echo "Deployment completed successfully."
          EOF
